/********************************************************************************/
树的基本概念：
节点的度：子树的个树
树的度：所有节点度中的最大植
叶子节点：度为0的节点
层数：根节点在第1层，根节点的子节点在第2层，以此类推
节点的深度：从根节点到当前节点的唯一路径上的节点总数
节点的高度：从当前节点到最远叶子节点的路径上的节点总数
树的深度：所有节点深度中的最大值
树的高度：所有节点高度中的最大值
树的深度等于树的高度

有序树：树中的人以节点之间有顺序关系
无序树：树中的任意子节点之间没有顺序关系

/********************************************************************************/
二叉树
定义：每个节点的度最大为2（最多拥有2颗子树）
特点：左子树和右子树是有顺序的
     即使某个节点只有一棵子树，也要区分左右子树
     二叉树是有序树

真二叉树：
定义：所有节点的度要么为0,要么为2

满二叉树：
定义：所有节点的度要么为0,要么为2。且所有的叶子节点都在最后一层
     在同样高度的二叉树中，满二叉树的叶子节点数量最多，总节点数量最多
     满二叉树一定是真二叉树，真二叉树不一定是满二叉树

完全二叉树：
定义：叶子节点只会出现在最后2曾，且最后1层的叶子节点都靠左对齐
特点：完全二叉树从根节点至倒数第2层是一棵满二叉树
     满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树
     同样节点数量的二叉树，完全二叉树的高度最小
     
     假设完全二叉树的高度为h（h>=1）,则至少有2^(h - 1)个节点（2^0 + 2^1 + 2^2 + ... + 2^(h-2) + 1）
     假设完全二叉树的高度为h（h>=1）,则最多有2^h - 1个节点（2^0 + 2^1 + 2^2 + ... + 2^(h-1），满二叉树）

     总节点数为n：2^(h-1) =< n < 2^h
                h-1 <= log2(n) < h  ==> h = log2(n)向下取整 + 1
                floor(向下取整)
                ceiling(向上取整数)

     面试题：如果一棵完全二叉树有768个结点，求叶子节点的个数
     求解过程：n = n0 + n1 + n2  && n0 = n2 + 1
             ==> n = 2n0 + n1 - 1
             完全二叉树的n1要么为0,要么为1
             n1为1时： n = 2n0         ==> n为偶数  n0 = n / 2   
             n1为0时： n = 2n0 - 1     ==> n为奇数  n0 = (n + 1) / 2

             统一公式：n0 = int((n + 1) / 2)

     前序遍历：树状结构展示
     中序遍历：二叉搜索树的中序遍历按升序或者降序处理节点
     后续遍历：适用于一些先子后父的操作
     层序遍历：计算二叉树的高度
             判断一棵树是否为完全二叉树

     根据遍历结果重构二叉树
     1.以下结果可以保证重构出唯一的一棵二叉树
       前序遍历 + 中序遍历
       后序遍历 + 中序遍历
     2.前序遍历 + 后序遍历
       如果它是一棵真二叉树，结果是唯一的
       不然结果不唯一

     前驱节点：中序遍历时的前一个节点
     1.node.left != null
       predecessor = node.left.right.right.right...
       终止条件：right为null
     2.node.left == null && node.parent != null
       predecessor = node.parent.parent.parent...
       终止条件：node在parent的右子树中
     3.node.left == null && node.parent == null
       没有前驱节点

     后继节点：中序遍历时的后一个节点
     1.node.right != null
       successor = node.right.left.left.left...
       终止条件：left为null
     2.node.right == null && node.parent != null
       successor = node.parent.parent.parent...
       终止条件：node在parent的左子树中
     3.node.right == null && node.parent == null
       没有后继节点

     判断一棵树是否为完全二叉树
     如果树不为空，开始层序遍历二叉树（用队列）
     1.如果node.left != null && node.right != null, 将node.left、node.right按顺序入队
     2.如果node.left == null && node.right != null, 返回false
     3.如果node.left != null && node.right == null 或者 node.left == null && node.right == null
       那么后面遍历的节点应该都为叶子节点，才是完全二叉树
       否则返回false
     4.遍历结束，返回true
     
/********************************************************************************/
二叉搜索树：二叉搜索树是二叉树的一种，是应用非常广泛的一种二叉树，英文简称为BST
          又称为二叉查找树、二叉排序树
特点：任意一个节点的值都大于其左子树所有节点的值
     任意一个节点的值都小于其右子树所有节点的值
     它的左右子树也是一棵二叉搜索树
     二叉搜索树所存储的元素必须具备可比较性，且不允许为空
     
     二叉搜索树删除节点：
     A1.删除度为0的节点(叶子节点)
        1.node == node.parent.left
          node.parent.left = null
        2.node == node.parent.right
          node.parent.right = null
        3.node.parent == null
          root = null
     A2.删除度为1的节点
        用子节点替代原节点的位置
        1.如果node是左子节点
          child.parent = node.parent
          node.parent.left = child
        2.如果node是右子节点
          child.parent = node.parent
          node.parent.right = child
        3.如果node是更节点
          root = child
          child->parent = null
     A3.删除度为2的节点
        1.先用前驱或者后继节点的值覆盖原节点的值
        2.然后删除相应的前驱或者后继节点
        如果一个节点的度为2,那么它的前驱、后继节点的度只可能是1和0
     

/********************************************************************************/
二叉搜索树添加、删除节点时，都有可能会导致二叉搜索树退化成链表
有没有办法防止二叉搜索树退化成链表（让添加、删除、搜索的复杂度维持在O(logn)）

平衡：当节点数量固定时，左右子树的高度越接近就越平衡（高度越低）

如何改进二叉搜索树
首先，节点的添加、删除顺序是无法限制的，可以认为是随即的
所以，改进的方案是：在节点的添加、删除操作之后，想办法让二叉搜索树恢复平衡（减少树的高度）
                 如果接着继续调整节点的位置，完全可以达到理想平衡，但是付出的代价可能会比较大
比较合理的改进方案：用尽量少的调整次数达到适度平衡即可
一颗适度平衡的二叉搜索树，可以称之为：平衡二叉搜索树

经典常见的平衡二叉搜索树有:AVL树（windows NT 内核中广泛使用） 红黑树(C++ STL, linux的进程调度)
AVL树，红黑树称为自平衡二叉搜索树

/********************************************************************************/
AVL树：
平衡因子（Balance Factor）：某节点的左右子树的高度差
AVL树每个节点的平衡因子只可能是1、0、-1（绝对值<=1, 如果超过1, 称为失衡）
每个节点的左右子树高度差不超过1
搜索、添加、删除的时间复杂度是O(logn)

添加导致的失衡：
  最坏情况：可能会导致所有祖先节点都失衡
  父节点、非祖先节点，都不可能失衡
  只要让高度最低的失衡节点恢复平衡，整棵树就恢复平衡【仅需O(1)次调整】

  树的旋转：
  1. LL left-left [右旋转（单旋）]
     g.left = p.right
     p.right = g
     更新p、g、T2子树的父节点
     更新g、p节点的高度
     让p成为这棵子树的根节点
  2. RR right-right [左旋转（单旋）]
     g.right = p.left
     p.left = g
     更新p、g、T1子树的父节点
     更新g、p节点的高度
  3. LR left-right [RR左旋转，LL右旋转（双旋）]
  4. RL right-left [LL右旋转，RR左旋转（双旋）]

删除导致的失衡：
  删除可能会导致父节点或祖先节点失衡(只有一个节点失衡)，其他节点都不可能失衡
  让父节点恢复平衡后，可能会导致更高层的祖父节点失衡【最多需要O(logn)次调整】

平均时间复杂度
  搜索：O(logn)
  添加：O(logn)，仅需O(1)次调整
  删除：O(logn)，最多需要O(logn)次调整

红黑树：
  1.红黑树是一种自平衡的二叉搜索树
  2.红黑树必须满足以下5条性质
    a.节点是RED或者BLACK
    b.根节点是BLACK
    c.叶子节点(外部节点、空节点)都是BLACK
    d.RED节点的子节点都是BLACK
      ==>RED节点的parent都是BLACK
      ==>从根节点到叶子节点的所有路径上不能有2个连续的RED节点
    5.从任一节点到叶子节点的所有路径都包含相同数目的BLACK节点
  
  3.红黑树的等价变换
    a.红黑树和4阶B树(2-3-4树)具有等价性
    b.BLACK节点与它的RED子结点融合在一起，形成1个B树节点
    c.红黑树的BLACK节点个数与4阶B树的节点总个数相等
    d.注(网上有些教程：用2-3树与红黑树进行类比，这是及其不严谨的，2-3树并不能完美匹配红黑树的所有情况；只有四阶B树才能完美匹配红黑树的所有情况)

  4.红黑树相关术语
    parent:父节点
    sibling:兄弟节点
    uncle:叔父节点(parent的兄弟节点)
    grand:祖父节点(parent的父节点)

  5.插入
    B树中，新元素必定插入到最后一排的节点中
    4阶B树所有节点的元素个数x都符合1<= x <= 3
    新添加的节点默认为RED，这样能够让红黑树的性质尽快满足
    如果添加的是根节点，染成BLACK即可
  6.删除
    
