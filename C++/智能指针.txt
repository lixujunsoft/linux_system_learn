关于智能指针
在C++11中通过引入智能指针，使得C++程序员不需要手动释放内存
智能指针的种类：
std::unique_ptr
std::shared_ptr
std::weak_ptr
注意：
    std::auto_ptr已被抛弃

智能指针概述：
    C++的指针包括两种
        原始指针(raw pointer)
        智能指针
    智能指针是原始指针的封装，其优点是会自动分配内存，不用担心潜在的内存泄漏

    注意：
        1.并不是所有的指针都可以封装成智能指针，很多时候原始指针要更方便
        2.各种指针中，最常用的是裸指针，其次是unique_ptr和shared_ptr
        3.weak_ptr是shared_ptr的一个补充，应用场景较少
    智能指针与Rust的内存安全
        1.智能指针只解决一部分问题，即独占、共享所有权指针的释放、传输
        2.智能指针没有从根本上解决C++内存安全问题，不加以注意依然会造成内存安全问题

独占指针：unique_ptr
    特点：1. 在任何给定时刻，只能有一个指针管理内存
         2. 当指针超出作用域时，内存将自动释放
         3. 该类型指针不可Copy，只可以Move
    三种创建方式：
        1. 通过已有裸指针创建
        2. 通过new来创建
        3. 通过std::make_unique创建（推荐）
    unique_ptr可以通过get()获取地址
    unique_ptr实现了->和*
        1. 可以通过->调用成员函数
        2. 可以通过*调用dereferencing
    unique_ptr与函数调用
        1. unique_ptr是不可Copy，只可以Move
        2. 在做函数参数或是返回值中一定要注意所有权
    函数调用与unique_ptr注意事项
        1. passing by value
                需要用std::move来转移内存拥有权
                如果参数直接传入std::make_unique语句，自动转换为move
        2. passing by reference (传引用)
                如果设置参数为const则不能改变指向，比如reset()
                reset()方法是智能指针的清空方法
        3. return by value
                指向一个local object
                可以用作链式函数
计数指针：shared_ptr
    1. shared_ptr创建了一个计数器与类对象所指的内存相关联
    2. Copy则计数器加一，销毁则计数器减一
    3. api为use_count()

    shared_ptr与函数
        1. passed by value
            Copy
            函数内部计数器加一
        2. passed by reference
            const表示不可改变指向
        3. return by value
            链式调用
shared_ptr与unique_ptr
    1. 不能将shared_ptr转换为unique_ptr
    2. unique_ptr可以转换为shared_ptr，通过std::move来转移内存拥有权
    unique_ptr一般作为函数的返回植使用，这样可以提高代码的复用率

弱引用：weak_ptr
    特点：
        1. weak_ptr并不拥有所有权
        2. 不能调用->和解引用*
    waek_ptr为什么会存在（情景分析）：
        1. A类中有一个需求需要存储其他A类对象的信息
        2. 如果使用shared_ptr，那么在销毁时遇到循环依赖的问题
        3. 所以我们这里需要用一个不需要所有权的指针来标记该同类对象
           weak_ptr可以通过lock()函数来提升为shared_ptr(类型转换)